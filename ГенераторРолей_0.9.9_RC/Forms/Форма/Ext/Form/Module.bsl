
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокВыбораПодсистем();
	ВерсияXML = "2.17";
	ЭтотОбъект.ВыбранноОбъектов = 0;
КонецПроцедуры

&НаКлиенте 
Процедура ШаблонКода()
	СИ = Новый СистемнаяИнформация;
	ВерсияПриложения =СИ.ВерсияПриложения;
	РезультатВыполненияКоманды = "";
	
	ИмяФайла = "\Configuration.cf";
	
	Текст =
	"@rem ----------------------------------------------------------
	|@rem This Source Code Form is subject to the terms of the
	|@rem Mozilla Public License, v.2.0. If a copy of the MPL
	|@rem was not distributed with this file, You can obtain one
	|@rem at http://mozilla.org/MPL/2.0/.
	|@rem ----------------------------------------------------------
	|@rem Codebase: https://github.com/ArKuznetsov/1CFilesConverter/
	|@rem ----------------------------------------------------------
	
	|@ECHO OFF
	
	|SETLOCAL ENABLEDELAYEDEXPANSION
	
	|IF not defined V8_ENCODING set V8_ENCODING=65001
	|chcp %V8_ENCODING% > nul
	
	|set CONVERT_VERSION=UNKNOWN
	|IF exist ""%~dp0..\VERSION"" FOR /F ""usebackq tokens=* delims="" %%i IN (""%~dp0..\VERSION"") DO set CONVERT_VERSION=%%i
	|echo 1C files converter v.%CONVERT_VERSION%
	|echo ======
	|echo [INFO] Convert 1C configuration to 1C configuration file ^(*.cf^)
	
	|set ERROR_CODE=0
	
	|IF exist ""%cd%\.env"" IF ""%V8_SKIP_ENV%"" neq ""1"" (
	|    FOR /F ""usebackq tokens=*"" %%a in (""%cd%\.env"") DO (
	|        FOR /F ""tokens=1* delims=="" %%b IN (""%%a"") DO ( 
	|            IF not defined %%b set ""%%b=%%c""
	|        )
	|    )
	|)
	
	|IF not defined V8_VERSION set V8_VERSION=" + ВерсияПриложения + Символы.ПС +
	"IF not defined V8_TEMP set V8_TEMP=%TEMP%\1c
	
	|echo [INFO] Using 1C:Enterprise, version %V8_VERSION%
	|echo [INFO] Using temporary folder ""%V8_TEMP%""
	
	|IF not ""%V8_CONVERT_TOOL%"" equ ""designer"" IF not ""%V8_CONVERT_TOOL%"" equ ""ibcmd"" set V8_CONVERT_TOOL=designer
	|IF not defined V8_TOOL set V8_TOOL=""%PROGRAMW6432%\1cv8\%V8_VERSION%\bin\1cv8.exe""
	|IF ""%V8_CONVERT_TOOL%"" equ ""designer"" IF not exist %V8_TOOL% (
	|    echo Could not find 1C:Designer with path %V8_TOOL%
	|    set ERROR_CODE=1
	|    goto finally
	|)
	|IF not defined IBCMD_TOOL set IBCMD_TOOL=""%PROGRAMW6432%\1cv8\%V8_VERSION%\bin\ibcmd.exe""
	|IF ""%V8_CONVERT_TOOL%"" equ ""ibcmd"" IF not exist %IBCMD_TOOL% (
	|    echo Could not find ibcmd tool with path %IBCMD_TOOL%
	|    set ERROR_CODE=1
	|    goto finally
	|)
	
	|echo [INFO] Start conversion using ""%V8_CONVERT_TOOL%""
	
	|set LOCAL_TEMP=%V8_TEMP%\%~n0
	|if not defined IBCMD_DATA set IBCMD_DATA=%V8_TEMP%\ibcmd_data
	|set IB_PATH=%LOCAL_TEMP%\tmp_db
	|set XML_PATH=%LOCAL_TEMP%\tmp_xml
	|set WS_PATH=%LOCAL_TEMP%\edt_ws
	
	|set ARG=" + ЭтотОбъект.КаталогСохранения + Символы.ПС +
	"IF defined ARG set ARG=%ARG:""=%
	|IF ""%ARG%"" neq """" set V8_SRC_PATH=%ARG%
	|set ARG=" + ЭтотОбъект.КаталогСохранения + ИмяФайла + Символы.ПС +
	"IF defined ARG set ARG=%ARG:""=%
	|IF ""%ARG%"" neq """" set V8_DST_PATH=%ARG%
	|set V8_DST_FOLDER=%~dp2
	|set V8_DST_FOLDER=%V8_DST_FOLDER:~0,-1%
	
	|IF not defined V8_SRC_PATH (
	|    echo [ERROR] Missed parameter 1 - ""path to 1C configuration source (infobase, 1C:Designer XML files or 1C:EDT project)""
	|    set ERROR_CODE=1
	|)
	|IF not defined V8_DST_PATH (
	|    echo [ERROR] Missed parameter 2 - ""path to 1C configuration file (*.cf)""
	|    set ERROR_CODE=1
	|)
	
	|IF %ERROR_CODE% neq 0 (
	|    echo ======
	|    echo [ERROR] Input parameters error. Expected:
	|    echo     %%1 - path to 1C configuration source ^(infobase, 1C:Designer XML files or 1C:EDT project^)
	|    echo     %%2 - path to 1C configuration file ^(*.cf^)
	|    echo.
	|    goto finally
	|)
	
	|echo [INFO] Clear temporary files...
	|IF exist ""%LOCAL_TEMP%"" rd /S /Q ""%LOCAL_TEMP%""
	|md ""%LOCAL_TEMP%""
	|IF not exist ""%V8_DST_FOLDER%"" md ""%V8_DST_FOLDER%""
	
	|echo [INFO] Checking configuration source type...
	
	|IF exist ""%V8_SRC_PATH%\DT-INF\"" (
	|    echo [INFO] Source type: 1C:EDT project
	|    set V8_IB_CONNECTION=File=""!IB_PATH!"";
	|    goto export_edt
	|)
	|IF exist ""%V8_SRC_PATH%\Configuration.xml"" (
	|    echo [INFO] Source type: 1C:Designer XML files
	|    set XML_PATH=%V8_SRC_PATH%
	|    set V8_IB_CONNECTION=File=""!IB_PATH!"";
	|    goto export_xml
	|)
	|IF /i ""%V8_SRC_PATH:~0,2%"" equ ""/F"" (
	|    set IB_PATH=%V8_SRC_PATH:~2%
	|    echo [INFO] Source type: File infobase ^(!IB_PATH!^)
	|    set V8_IB_CONNECTION=File=""!IB_PATH!"";
	|    goto export_ib
	|)
	|IF /i ""%V8_SRC_PATH:~0,2%"" equ ""/S"" (
	|    set IB_PATH=%V8_SRC_PATH:~2%
	|    FOR /F ""tokens=1,2 delims=\"" %%a IN (""!IB_PATH!"") DO (
	|        set V8_IB_SERVER=%%a
	|        set V8_IB_NAME=%%b
	|    )
	|    echo [INFO] Source type: Server infobase ^(!V8_IB_SERVER!\!V8_IB_NAME!^)
	|    set IB_PATH=!V8_IB_SERVER!\!V8_IB_NAME!
	|    set V8_IB_CONNECTION=Srvr=""!V8_IB_SERVER!"";Ref=""!V8_IB_NAME!"";
	|    IF not defined V8_DB_SRV_DBMS set V8_DB_SRV_DBMS=MSSQLServer
	|    goto export_ib
	|)
	|IF exist ""%V8_SRC_PATH%\1cv8.1cd"" (
	|    echo [INFO] Source type: File infobase ^(!V8_SRC_PATH!^)
	|    set IB_PATH=%V8_SRC_PATH%
	|    set V8_IB_CONNECTION=File=""!V8_SRC_PATH!"";
	|    goto export_ib
	|)
	
	|echo [ERROR] Error cheking type of configuration ""%V8_SRC_PATH%""!
	|echo Infobase, 1C:Designer XML files or 1C:EDT project expected.
	|set ERROR_CODE=1
	|goto finally
	
	|:export_edt
	
	|IF not exist ""%XML_PATH%"" md ""%XML_PATH%""
	|md ""%WS_PATH%""
	
	|echo [INFO] Export ""%V8_SRC_PATH%"" to 1C:Designer XML format ""%XML_PATH%""...
	|IF not defined RING_TOOL (
	|    FOR /F ""usebackq tokens=1 delims="" %%i IN (`where ring`) DO (
	|        set RING_TOOL=""%%i""
	|    )
	|)
	|IF not defined EDTCLI_TOOL (
	|    IF defined V8_EDT_VERSION (
	|        IF %V8_EDT_VERSION:~0,4% lss 2024 goto checktool
	|        set EDT_MASK=""%PROGRAMW6432%\1C\1CE\components\1c-edt-%V8_EDT_VERSION%*""
	|    ) ELSE (
	|        set EDT_MASK=""%PROGRAMW6432%\1C\1CE\components\1c-edt-*""
	|    )
	|    FOR /F ""tokens=*"" %%d IN ('""dir /B /S !EDT_MASK! | findstr /r /i "".*1c-edt-[0-9]*\.[0-9]*\.[0-9].*""""') DO (
	|        IF exist ""%%d\1cedtcli.exe"" set EDTCLI_TOOL=""%%d\1cedtcli.exe""
	|    )
	|)
	
	|:checktool
	
	|IF not defined RING_TOOL IF not defined EDTCLI_TOOL (
	|    echo [ERROR] Can't find ""ring"" or ""edtcli"" tool. Add path to ""ring.bat"" to ""PATH"" environment variable, or set ""RING_TOOL"" variable with full specified path to ""ring.bat"", or set ""EDTCLI_TOOL"" variable with full specified path to ""1cedtcli.exe"".
	|    set ERROR_CODE=1
	|    goto finally
	|)
	|IF defined EDTCLI_TOOL (
	|    echo [INFO] Start conversion using ""edt cli""
	|    call %EDTCLI_TOOL% -data ""%WS_PATH%"" -command export --project ""%V8_SRC_PATH%"" --configuration-files ""%XML_PATH%""
	|) ELSE (
	|    echo [INFO] Start conversion using ""ring""
	|    call %RING_TOOL% edt@%V8_EDT_VERSION% workspace export --project ""%V8_SRC_PATH%"" --configuration-files ""%XML_PATH%"" --workspace-location ""%WS_PATH%""
	|)
	|IF not ERRORLEVEL 0 (
	|    set ERROR_CODE=%ERRORLEVEL%
	|    goto finally
	|)
	
	|:export_xml
	
	|IF not exist ""%IB_PATH%"" md ""%IB_PATH%""
	
	|IF ""%V8_CONVERT_TOOL%"" equ ""designer"" (
	|    set V8_DESIGNER_LOG=%LOCAL_TEMP%\v8_designer_output.log
	|    echo [INFO] Creating infobase ""%IB_PATH%""...
	|    %V8_TOOL% CREATEINFOBASE %V8_IB_CONNECTION% /DisableStartupDialogs /Out ""!V8_DESIGNER_LOG!""
	|    FOR /F ""tokens=* delims="" %%i IN (!V8_DESIGNER_LOG!) DO IF ""%%i"" neq """" echo [WARN] %%i
	
	|    echo [INFO] Loading infobase ""%IB_PATH%"" configuration from XML-files ""%XML_PATH%""...
	|    %V8_TOOL% DESIGNER /IBConnectionString %V8_IB_CONNECTION% /DisableStartupDialogs /Out ""!V8_DESIGNER_LOG!"" /LoadConfigFromFiles ""%XML_PATH%""
	|    FOR /F ""tokens=* delims="" %%i IN (!V8_DESIGNER_LOG!) DO IF ""%%i"" neq """" echo [WARN] %%i
	|) ELSE (
	|    echo [INFO] Creating infobase ""%IB_PATH%"" with configuration from XML-files ""%XML_PATH%""...
	|    %IBCMD_TOOL% infobase create --data=""%IBCMD_DATA%"" --db-path=""%IB_PATH%"" --create-database --import=""%XML_PATH%""
	|)
	|IF not ERRORLEVEL 0 (
	|    set ERROR_CODE=%ERRORLEVEL%
	|    goto finally
	|)
	
	|:export_ib
	
	|echo [INFO] Export infobase ""%IB_PATH%"" configuration to ""%V8_DST_PATH%""...
	|IF ""%V8_CONVERT_TOOL%"" equ ""designer"" (
	|    set V8_DESIGNER_LOG=%LOCAL_TEMP%\v8_designer_output.log
	|    %V8_TOOL% DESIGNER /IBConnectionString %V8_IB_CONNECTION% /N""%V8_IB_USER%"" /P""%V8_IB_PWD%"" /DisableStartupDialogs /Out ""!V8_DESIGNER_LOG!"" /DumpCfg  ""%V8_DST_PATH%""
	|    FOR /F ""tokens=* delims="" %%i IN (!V8_DESIGNER_LOG!) DO IF ""%%i"" neq """" echo [WARN] %%i
	|) ELSE (
	|    IF defined V8_IB_SERVER (
	|        %IBCMD_TOOL% infobase config save --data=""%IBCMD_DATA%"" --dbms=%V8_DB_SRV_DBMS% --db-server=%V8_IB_SERVER% --db-name=""%V8_IB_NAME%"" --db-user=""%V8_DB_SRV_USR%"" --db-pwd=""%V8_DB_SRV_PWD%"" --user=""%V8_IB_USER%"" --password=""%V8_IB_PWD%"" ""%V8_DST_PATH%""
	|    ) ELSE (
	|        %IBCMD_TOOL% infobase config save --data=""%IBCMD_DATA%"" --db-path=""%IB_PATH%"" --user=""%V8_IB_USER%"" --password=""%V8_IB_PWD%"" ""%V8_DST_PATH%""
	|    )
	|)
	|set ERROR_CODE=%ERRORLEVEL%
	
	|:finally
	
	|echo [INFO] Clear temporary files...
	|IF exist ""%LOCAL_TEMP%"" rd /S /Q ""%LOCAL_TEMP%""
	
	|exit /b %ERROR_CODE%";
	
	//ЗапуститьПриложение(Текст, , Истина, РезультатВыполненияКоманды);
	//Сообщить(РезультатВыполненияКоманды);
	//
	//Shell=Новый COMОбъект("WScript.Shell");
	//Shell.Run(Текст,0,0);

	Запуск(Текст);
КонецПроцедуры

&НаКлиенте
Процедура Запуск(Текст)
	
	//ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	//ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	//ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	//ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	
	//ФайловаяСистемаКлиент.ЗапуститьПрограмму("ping 127.0.0.1 -n 5", ПараметрыЗапускаПрограммы);
	
	//КодВозврата = Результат.КодВозврата;
	//ПотокВывода = Результат.ПотокВывода;
	//ПотокОшибок = Результат.ПотокОшибок;
	
	// Запуск с ожиданием завершения и получения кода возврата:
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.Оповещение = Новый ОписаниеОповещения("ПриПолученииРезультатаЗапускаПрограммы", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(Текст, ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаЗапускаПрограммы(Результат, ДополнительныеПараметры) Экспорт
	КодВозврата = Результат.КодВозврата;
	ПотокВывода = Результат.ПотокВывода;
	ПотокОшибок = Результат.ПотокОшибок;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогСохраненияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Проводник.Заголовок = "Выберите каталог сохранения";
	Оповещение = новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект);
	Проводник.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ИмяРолиПриИзменении(Элемент)
	ЭтотОбъект.ИмяРоли = СтрСоединить(СтрРазделить(ЭтотОбъект.ИмяРоли," 	"));
	Синоним = Лев(ЭтотОбъект.ИмяРоли,1);
	Для Индекс = 2 по СтрДлина(ЭтотОбъект.ИмяРоли) цикл
		Символ = Сред(ЭтотОбъект.ИмяРоли,Индекс,1);
		Синоним = Синоним + ?(ВРег(Символ) = Символ," " + НРег(Символ), Символ);
	КонецЦикла;
	ЭтотОбъект.СинонимРоли = Синоним;
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьСвязанныеПриИзменении(Элемент)
	ЭтотОбъект.ДобавлятьДвижения = Ложь;
	Элементы.КоличествоСвязанных.Видимость = ЭтотОбъект.ДобавлятьСвязанные;
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьДвиженияПриИзменении(Элемент)
	ЭтотОбъект.ДобавлятьСвязанные = Ложь;
	Элементы.КоличествоСвязанных.Видимость = ЭтотОбъект.ДобавлятьДвижения;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПодсистем

&НаКлиенте
Процедура ДеревоПодсистемЧтениеПриИзменении(Элемент)
	ДеревоПодсистемУправлениеФлажками(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодсистемПросмотрПриИзменении(Элемент)
	ДеревоПодсистемУправлениеФлажками(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодсистемИзменениеПриИзменении(Элемент)
	ДеревоПодсистемУправлениеФлажками(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьФайл(Команда)
	Если Не ВыбранноОбъектов Тогда
		Сообщить("Не выбрано ни одного объекта!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КаталогСохранения) и ЗначениеЗаполнено(ЭтотОбъект.ИмяРоли) Тогда
		СоздатьФайлЗаголовокРоли();
		СоздатьФайлНастройкиРоли();
		ДобавитьРольВКорневойФайл();
	Иначе
		Сообщить("Укажите каталог сохранения и имя роли!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураОтладка(Команда)
	ШаблонКода();
	//ЭтотОбъект.Отладка = Истина;
	//ЗаписатьПрава("Связи");
	//ЭтотОбъект.Отладка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсе(Команда)
	ЭтотОбъект.ДеревоПодсистем.ПолучитьЭлементы().Очистить();
	ЗаполнитьДеревоОбъектами(Ложь);
	ЭтотОбъект.ВыбранноОбъектов = 0;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранную(Команда)
	Если ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		ЭтотОбъект.ДеревоПодсистем.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоОбъектами(Истина);
		ЭтотОбъект.ВыбранноОбъектов = 0;
	Иначе
		Сообщить("Выберите подсистему!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвязанные(Команда)
	ЗаписатьПрава("Связи");
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКонфигурациюВФайлы(Команда)
	
	Перем РезультатВыполненияКоманды;
	
	#Если Не ВебКлиент Тогда
		
		ПапкаВыгрузки =ЭтотОбъект.КаталогСохранения;
		
		ВывестиСообщение(НСтр("ru = 'Начало выгрузки конфигурации в файлы'"));
		Состояние(НСтр("ru = 'Выгрузка конфигурации...'"));
		
		Если ПустаяСтрока(ПапкаВыгрузки) Тогда
			ПапкаВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
		КонецЕсли; 
		
		Файл = Новый Файл(ПапкаВыгрузки);
		Если Не Файл.Существует() Тогда
			СоздатьКаталог(ПапкаВыгрузки);
		КонецЕсли;
		
		ШаблонКоманды = """[КаталогПрограммы]\1cv8.exe"" DESIGNER /DisableStartupMessages "
		+ " /IBConnectionString ""[СтрокаСоединения]"""
		+ " /N ""[ИмяПользователя]"""
		+ " /P ""[Пароль]"""
		+ " /DumpConfigToFiles ""[ПапкаВыгрузки]"""
		+ " -Format Hierarchical";
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("КаталогПрограммы", КаталогПрограммы());
		ПараметрыКоманды.Вставить("СтрокаСоединения", СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """"""));
		ПараметрыКоманды.Вставить("ИмяПользователя", ИмяПользователя());
		ПараметрыКоманды.Вставить("Пароль", "");
		ПараметрыКоманды.Вставить("ПапкаВыгрузки", ПапкаВыгрузки);
		
		СтрокаКоманды = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКоманды, ПараметрыКоманды);
		
		ЗапуститьПриложение(СтрокаКоманды, , Истина, РезультатВыполненияКоманды);
		
		ВывестиСообщение(НСтр("ru = 'Выгрузка конфигурации завершена с кодом %1'"), РезультатВыполненияКоманды);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонфигурациюИзФайлов(Команда)
	
	Перем РезультатВыполненияКоманды;
	
	#Если Не ВебКлиент Тогда
		
		ПапкаВыгрузки =ЭтотОбъект.КаталогСохранения;
		
		ВывестиСообщение(НСтр("ru = 'Начало загрузки конфигурации из файлов'"));
		Состояние(НСтр("ru = 'Загрузка текстов модулей...'"));
		
		ШаблонКоманды = """[КаталогПрограммы]\1cv8.exe"" DESIGNER /DisableStartupMessages "
		+ " /IBConnectionString ""[СтрокаСоединения]"""
		+ " /N ""[ИмяПользователя]"""
		+ " /P ""[Пароль]"""
		+ " /LoadConfigFromFiles ""[ПапкаВыгрузки]"""
		+ " -Format Hierarchical";
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("КаталогПрограммы", КаталогПрограммы());
		ПараметрыКоманды.Вставить("СтрокаСоединения", СтрЗаменить(СтрокаСоединенияИнформационнойБазы(), """", """"""));
		ПараметрыКоманды.Вставить("ИмяПользователя", ИмяПользователя());
		ПараметрыКоманды.Вставить("Пароль", "");
		ПараметрыКоманды.Вставить("ПапкаВыгрузки", ПапкаВыгрузки);
		
		СтрокаКоманды = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКоманды, ПараметрыКоманды);
		
		ЗапуститьПриложение(СтрокаКоманды, , Истина, РезультатВыполненияКоманды);
		
		ВывестиСообщение(НСтр("ru = 'Загрузка конфигурации завершена с кодом %1'"), РезультатВыполненияКоманды);
		
	#КонецЕсли
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВывестиСообщение(Знач ТекстСообщения, Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено)
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, Параметр1, Параметр2);
		
	ШаблонСообщения = "[%1] %2";
	РезультатВыполнения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДЛФ=T"), ТекстСообщения));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект.КаталогСохранения = ВыбранныеФайлы[0];
	ПолучитьВерсиюXML();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюXML()
	Попытка
		ИмяФайла = "\Configuration.xml";
		КаталогСохраненияПуть = ЭтотОбъект.КаталогСохранения + ИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(КаталогСохраненияПуть);
		Текст = ТекстовыйДокумент.ПолучитьСтроку(2);
		СтрокаРоли = "version=";
		Позиция = СтрНайти(Текст, СтрокаРоли);
		Смещение = 9;
		ЭтотОбъект.ВерсияXML = Сред(Текст, Позиция + Смещение, 4);
	Исключение
		//ОписаниеОшибки()
	КонецПопытки;
КонецПроцедуры

//Заполняет СписокВыбора реквизита ИмяПодсистемы
&НаСервере
Процедура ЗаполнитьСписокВыбораПодсистем()
	СписокВыбора = Элементы.ИмяПодсистемы.СписокВыбора;
	
	Для каждого Подсистема Из Метаданные.Подсистемы Цикл
		СписокВыбора.Добавить(Подсистема.Синоним, СтрШаблон("%1(%2)", Подсистема.Синоним, Подсистема.Имя));
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
КонецПроцедуры

#Область УправлениеФлажками

&НаКлиенте
Процедура ДеревоПодсистемУправлениеФлажками(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПодсистем.ТекущаяСтрока;
	//Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ЭлементДерева = ДеревоПодсистем.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем другие флажки при установке текущего
	Если Элемент.Имя = "ДеревоПодсистемЧтение" И ЭлементДерева.Чтение Тогда
		ЭлементДерева.Просмотр = Ложь;
		ЭлементДерева.Изменение = Ложь;
	ИначеЕсли Элемент.Имя = "ДеревоПодсистемПросмотр" И ЭлементДерева.Просмотр Тогда
		ЭлементДерева.Чтение = Ложь;
		ЭлементДерева.Изменение = Ложь;
	ИначеЕсли Элемент.Имя = "ДеревоПодсистемИзменение" И ЭлементДерева.Изменение Тогда
		ЭлементДерева.Чтение = Ложь;
		ЭлементДерева.Просмотр = Ложь;
	КонецЕсли;
	
	// Распространяем изменения на дочерние элементы
	УстановитьПраваДляПотомков(ЭлементДерева, ЭлементДерева.Чтение, ЭлементДерева.Просмотр, ЭлементДерева.Изменение);
	
	// Подсчет строк с установленными правами
	ПодсчитатьСтрокиСПравами();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПраваДляПотомков(Знач РодительскийЭлемент, Знач Чтение, Знач Просмотр, Знач Изменение)
	
	Для каждого ДочернийЭлемент Из РодительскийЭлемент.ПолучитьЭлементы() Цикл
		// Устанавливаем такие же права, как у родителя
		ДочернийЭлемент.Чтение = Чтение;
		ДочернийЭлемент.Просмотр = Просмотр;
		ДочернийЭлемент.Изменение = Изменение;
		
		// Рекурсивно обрабатываем вложенные элементы
		УстановитьПраваДляПотомков(ДочернийЭлемент, Чтение, Просмотр, Изменение);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СчетчикВыбранныхСтрок

&НаКлиенте
Процедура ПодсчитатьСтрокиСПравами()
	
	КоличествоСтрокСПравами = 0;
	КореньДерева = ДеревоПодсистем.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из КореньДерева Цикл
		Если (ЭлементДерева.Чтение Или ЭлементДерева.Просмотр Или ЭлементДерева.Изменение) 
				И ЗначениеЗаполнено(ЭлементДерева.ИмяОбъекта) Тогда
			КоличествоСтрокСПравами = КоличествоСтрокСПравами + 1;
		КонецЕсли;
		
		// Рекурсивно проверяем дочерние элементы
		КоличествоСтрокСПравами = КоличествоСтрокСПравами + ПодсчитатьСтрокиПотомковСПравами(ЭлементДерева);
	КонецЦикла;
	
	ЭтотОбъект.ВыбранноОбъектов = КоличествоСтрокСПравами;
	
КонецПроцедуры

&НаКлиенте
Функция ПодсчитатьСтрокиПотомковСПравами(РодительскийЭлемент)
	
	КоличествоСтрок = 0;
	
	Для каждого ДочернийЭлемент Из РодительскийЭлемент.ПолучитьЭлементы() Цикл
		Если (ДочернийЭлемент.Чтение Или ДочернийЭлемент.Просмотр Или ДочернийЭлемент.Изменение) 
				И ЗначениеЗаполнено(ДочернийЭлемент.ИмяОбъекта) Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
		
		// Рекурсивно проверяем вложенные элементы
		КоличествоСтрок = КоличествоСтрок + ПодсчитатьСтрокиПотомковСПравами(ДочернийЭлемент);
	КонецЦикла;
	
	Возврат КоличествоСтрок;
КонецФункции

#КонецОбласти

#Область ЗаполнитьДерево

&НаСервере
Процедура ЗаполнитьДеревоОбъектами(Знач ТолькоВыбраннаяПодсистема) Экспорт
	
	ЭлементыДерева = ДеревоПодсистем.ПолучитьЭлементы();
	КорневыеПодсистемы = Метаданные.Подсистемы;
	
	Для каждого ТекущаяПодсистема из КорневыеПодсистемы Цикл
		
		Если ТолькоВыбраннаяПодсистема 
			И Не ТекущаяПодсистема.Синоним = ИмяПодсистемы Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПодсистемы = ЭлементыДерева.Добавить();
		СтрокаПодсистемы.Представление = СтрШаблон("%1(%2)", ТекущаяПодсистема.Синоним, ТекущаяПодсистема.Имя);
		
		ЗаполнитьДанныеПодсистемДерево(ТекущаяПодсистема, СтрокаПодсистемы);
		
		Если Не ТекущаяПодсистема.Подсистемы.Количество() = 0 Тогда
			ОбработатьВложенныеПодсистемы(
				ТекущаяПодсистема, 
				ТекущаяПодсистема.Подсистемы, 
				СтрокаПодсистемы,
				ТекущаяПодсистема.Имя
			);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьВложенныеПодсистемы(
	Знач РодительскаяПодсистема, 
	Знач ВложенныеПодсистемы, 
	Знач СтрокаРодителя, 
	Знач ИмяРодительскойПодсистемы = ""
)
	
	Для каждого ТекущаяВложеннаяПодсистема из ВложенныеПодсистемы Цикл
		
		ЭлементыВложеннойПодсистемы = СтрокаРодителя.ПолучитьЭлементы();
		СтрокаВложеннойПодсистемы = ЭлементыВложеннойПодсистемы.Добавить();
		СтрокаВложеннойПодсистемы.Представление = 
			СтрШаблон("Подсистема: %1(%2)", ТекущаяВложеннаяПодсистема.Синоним, ТекущаяВложеннаяПодсистема.Имя);
		
		ПолноеИмяРодителя = ?(ПустаяСтрока(ИмяРодительскойПодсистемы), 
			РодительскаяПодсистема.Имя, 
			СтрШаблон("%1.%2", ИмяРодительскойПодсистемы, РодительскаяПодсистема.Имя));
		
		ЗаполнитьДанныеПодсистемДерево(
			ТекущаяВложеннаяПодсистема, 
			СтрокаВложеннойПодсистемы, 
			ПолноеИмяРодителя
		);
		
		Если Не ТекущаяВложеннаяПодсистема.Подсистемы.Количество() = 0 Тогда
			ОбработатьВложенныеПодсистемы(
				ТекущаяВложеннаяПодсистема,
				ТекущаяВложеннаяПодсистема.Подсистемы,
				СтрокаВложеннойПодсистемы,
				ПолноеИмяРодителя
			);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПодсистемДерево(Знач Подсистема, Знач СтрокаДерева, Знач Родитель = "")
	
	ОбъектыПодсистемы = СоздатьТаблицуОбъектовПодсистем();
	ЗаполнитьТаблицуОбъектами(Подсистема, ОбъектыПодсистемы, Родитель);
	
	ОбъектыПодсистемы.Сортировать("Подсистема, ВложеннаяПодсистема, ТипОбъекта, ИмяОбъекта");
	
	СформироватьДерево(ОбъектыПодсистемы, СтрокаДерева);
КонецПроцедуры

&НаСервере
Функция СоздатьТаблицуОбъектовПодсистем()
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("ВложеннаяПодсистема", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОбъектов;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуОбъектами(Знач Подсистема, Знач ТаблицаОбъектов, Знач Родитель)
	
	МассивРегистры = Новый Массив;
	
	Для каждого ОбъектМетаданных из Подсистема.Состав Цикл
		ДанныеОбъекта = РазобратьПолноеИмя(ОбъектМетаданных.ПолноеИмя());
		
		Если ДанныеОбъекта.Тип = "Документ" Тогда
			
			Для каждого Регистр Из ОбъектМетаданных.Движения Цикл
				Если МассивРегистры.Найти(Регистр.ПолноеИмя()) = Неопределено Тогда
					МассивРегистры.Добавить(Регистр.ПолноеИмя());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = ТаблицаОбъектов.Добавить();
		НоваяСтрокаТаблицы.ТипОбъекта = ДанныеОбъекта.Тип;
		НоваяСтрокаТаблицы.ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		НоваяСтрокаТаблицы.Представление = ОбъектМетаданных.Синоним;
		
		Если Не ПустаяСтрока(Родитель) Тогда
			НоваяСтрокаТаблицы.ВложеннаяПодсистема = Подсистема.Имя;
			НоваяСтрокаТаблицы.Подсистема = Родитель;
		Иначе
			НоваяСтрокаТаблицы.Подсистема = Подсистема.Имя;
		КонецЕсли;
	КонецЦикла;
	
	//МассивРегистры = УдалитьПовторяющиесяЭлементыМассива(МассивРегистры);
	
	ЗаполнитьТаблицуРегистры(Подсистема.Имя, МассивРегистры, ТаблицаОбъектов.ВыгрузитьКолонку("ИмяОбъекта"));
	
	//ТаблицаРегистры = ДанныеФормыВЗначение(ЭтотОбъект.Регистры, Тип("ТаблицаЗначений"));
	//ТаблицаРегистры.ЗагрузитьКолонку(РегистрыНеВходящиеВПодсистему, "Имя");
	//ЗначениеВРеквизитФормы(ТаблицаРегистры, "Регистры");
	
КонецПроцедуры

//БСП
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМассиве 		   = Новый Соответствие; 
		БылоНеопределено 	   = Ложь;
		КоличествоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КоличествоЭлементовВМассиве Цикл 
			
			ЭлементМассива = Массив[КоличествоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента    = ТипЗнч(ЭлементМассива); 
			
			Если ЭлементМассива = Неопределено Тогда
				
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМассиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
			
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегистры(Знач Подсистема, Знач МассивВсе, Знач Массив1)
	Для каждого ЭлементМассива из МассивВсе Цикл
		Если Массив1.Найти(ЭлементМассива) = Неопределено Тогда
			НоваяСтрока = ЭтотОбъект.Регистры.Добавить();
			НоваяСтрока.Подсистема = Подсистема;
			НоваяСтрока.Имя = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция РазностьМассивовОриг(Знач МассивВсе, Знач Массив1)
	
	Результат  = Новый Массив;
	Для каждого ЭлементМассива из МассивВсе Цикл
		Если Массив1.Найти(ЭлементМассива) = Неопределено Тогда
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазобратьПолноеИмя(Знач ПолноеИмя)
	
	ИндексТочки = СтрНайти(ПолноеИмя, ".");
	Если ИндексТочки = 0 Тогда
		ВызватьИсключение "Некорректный формат полного имени объекта";
	КонецЕсли;
	
	Возврат Новый Структура("Тип", Лев(ПолноеИмя, ИндексТочки - 1));
КонецФункции

&НаСервере
Процедура СформироватьДерево(Знач ТаблицаОбъектов, Знач СтрокаДерева)
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	ТекущийТипОбъекта = Неопределено;
	
	Для каждого СтрокаОбъекта из ТаблицаОбъектов Цикл
		Если ТекущийТипОбъекта <> СтрокаОбъекта.ТипОбъекта Тогда
			ГруппаТипа = ЭлементыДерева.Добавить();
			ГруппаТипа.Представление = СтрокаОбъекта.ТипОбъекта;
			ТекущийТипОбъекта = СтрокаОбъекта.ТипОбъекта;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ГруппаТипа.ПолучитьЭлементы().Добавить(), СтрокаОбъекта);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СозданиеФайлов

// Configuration.xml
&НаКлиенте
Процедура ДобавитьРольВКорневойФайл()
	ИмяФайла = "\Configuration.xml";
	КаталогСохраненияПуть = ЭтотОбъект.КаталогСохранения + ИмяФайла;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(КаталогСохраненияПуть);
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	СтрокаРоли = "<Role>" + ЭтотОбъект.ИмяРоли + "</Role>";
	Если Найти(Текст, СтрокаРоли) = 0 Тогда
		ДобавляемаяСтрока = Символы.Таб + Символы.Таб + Символы.Таб + СтрокаРоли;
		ТекстовыйДокумент.ВставитьСтроку(ТекстовыйДокумент.КоличествоСтрок() - 2, ДобавляемаяСтрока);
		ТекстовыйДокумент.Записать(КаталогСохраненияПуть);
		Сообщить(СтрШаблон("Роль ""%1"" добавлена в: %2%3", ЭтотОбъект.ИмяРоли, КаталогСохраненияПуть, ИмяФайла))
	Иначе
		Сообщить(СтрШаблон("Роль ""%1"" уже существует в: %2%3", ЭтотОбъект.ИмяРоли, КаталогСохраненияПуть, ИмяФайла))
	КонецЕсли;
КонецПроцедуры

// ИмяРоли.xml
&НаКлиенте
Процедура СоздатьФайлЗаголовокРоли()
	КаталогСохраненияПуть = СтрШаблон("%1\Roles", ЭтотОбъект.КаталогСохранения);
	ИмяФайла = СтрШаблон("\%1.xml", ЭтотОбъект.ИмяРоли);
	СоздатьКаталог(КаталогСохраненияПуть);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогСохраненияПуть + ИмяФайла);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("MetaDataObject");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.3/MDClasses");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("app", "http://v8.1c.ru/8.2/managed-application/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("cfg", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("cmi", "http://v8.1c.ru/8.2/managed-application/cmi");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ent", "http://v8.1c.ru/8.1/data/enterprise");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("lf", "http://v8.1c.ru/8.2/managed-application/logform");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("style", "http://v8.1c.ru/8.1/data/ui/style");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("sys", "http://v8.1c.ru/8.1/data/ui/fonts/system");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8ui", "http://v8.1c.ru/8.1/data/ui");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("web", "http://v8.1c.ru/8.1/data/ui/colors/web");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("win", "http://v8.1c.ru/8.1/data/ui/colors/windows");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xen", "http://v8.1c.ru/8.3/xcf/enums");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xpr", "http://v8.1c.ru/8.3/xcf/predef");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xr", "http://v8.1c.ru/8.3/xcf/readable");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("version", ВерсияXML);
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("Role"); // 2 Уровень. Role
		ЗаписьXML.ЗаписатьАтрибут("uuid", Строка(Новый УникальныйИдентификатор()));
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Properties"); // 3 Уровень. Properties
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Name"); // 4 Уровень. Name
				ЗаписьXML.ЗаписатьТекст(ЭтотОбъект.ИмяРоли);
				ЗаписьXML.ЗаписатьКонецЭлемента();// Закрывем 4 Уровень. Name
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Synonym"); // 4 Уровень. Synonym
				
					ЗаписьXML.ЗаписатьНачалоЭлемента("v8:item"); // 5 Уровень. v8:item
					
						ЗаписьXML.ЗаписатьНачалоЭлемента("v8:lang"); // 6 Уровень. v8:lang
						ЗаписьXML.ЗаписатьТекст("ru");
						ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрывем 6 Уровень. v8:lang
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("v8:content"); // 6 Уровень. v8:content
						ЗаписьXML.ЗаписатьТекст(ЭтотОбъект.СинонимРоли); // Сюда необходимо вставить описание роли
						ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрывем 6 Уровень. v8:content
						
					ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрывем 5 Уровень. v8:item
					
				ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрывем 4 Уровень. Synonym
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Comment"); // 4 Уровень. Comment
				ЗаписьXML.ЗаписатьКонецЭлемента();// Закрывем 4 Уровень. Comment
				
			ЗаписьXML.ЗаписатьКонецЭлемента();// Закрывем 3 Уровень. Properties
			
		ЗаписьXML.ЗаписатьКонецЭлемента();// Закрывем 2 Уровень. Role
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрываем 1 Уровень. MetaDataObject
	
	ЗаписьXML.Закрыть();
	Сообщить(СтрШаблон("Файл сохранен: %1%2", КаталогСохраненияПуть, ИмяФайла));
КонецПроцедуры

// Rights.xml
&НаКлиенте
Процедура СоздатьФайлНастройкиРоли()
	ИмяРоли = ЭтотОбъект.ИмяРоли;
	ИмяФайла = "\Rights.xml";
	КаталогСохраненияПуть = СтрШаблон("%1\Roles\%2\Ext", ЭтотОбъект.КаталогСохранения, ИмяРоли);
	//"H:\Выгрузка для ролей\3\Roles" + "\" + ИмяРоли + "\" + "\Ext"
	СоздатьКаталог(КаталогСохраненияПуть);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогСохраненияПуть + ИмяФайла);
	
		// Область шапки файла
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Rights");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.2/roles");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xsi:type", "Rights");
	ЗаписьXML.ЗаписатьАтрибут("version", ВерсияXML);
	//Общие настройки
	
	// Если false — новые объекты (справочники, документы) не получат автоматически эти права.
	// Если бы было true, то при создании нового элемента (например, документа "Накладная") 
	// к нему сразу применялись бы указанные права.
	ЗаписьXML.ЗаписатьНачалоЭлемента("setForNewObjects");
	ЗаписьXML.ЗаписатьТекст("false");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Если true — права автоматически применяются ко всем реквизитам (полям) объектов,
	// если явно не указано иное.
	// Например, если у роли есть право «Чтение» для справочника "Контрагенты",
	// то все его поля (название, ИНН, адрес) тоже будут доступны.
	ЗаписьXML.ЗаписатьНачалоЭлемента("setForAttributesByDefault");
	ЗаписьXML.ЗаписатьТекст("true");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Если false — дочерние объекты наследуют права родителя.
	// Например, если у вас есть документ "Заказ" с табличной частью "Товары",
	// то при false права на "Товары" будут зависеть от прав "Заказа".
	// Если true — дочерние объекты (например, строки табличной части) могут иметь отдельные права.
	ЗаписьXML.ЗаписатьНачалоЭлемента("independentRightsOfChildObjects");
	ЗаписьXML.ЗаписатьТекст("false");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьПрава(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	Сообщить(СтрШаблон("Файл сохранен: %1%2", КаталогСохраненияПуть,ИмяФайла));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрава(ЗаписьXML)
	
	//СоответствиеВыбранныеОбъекты = Новый Соответствие;
	
	СоответствиеВыбранныеОбъекты = ВыбраныеОбъктыДереваСоответствие();
	
	Если ЭтотОбъект.ДобавлятьСвязанные или ЭтотОбъект.ДобавлятьДвижения Тогда
		
		СоответствиеСвязанныеОбъекты = СвязанныеОбъектыСоответствие(СоответствиеВыбранныеОбъекты);
		
		// заполняет таблицу связанные объекты на форме
		ЗаполнитьТаблицуСвязанныеОбъекты(СоответствиеСвязанныеОбъекты);
		
		//Подготовака финального списка объектов для записи
		Если Не ЗаписьXML = "Связи" Тогда
			ДобавитьСвязанные(СоответствиеВыбранныеОбъекты, СоответствиеСвязанныеОбъекты);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись прав в файл
	Если Не ЗаписьXML = "Связи" Тогда
		Для Каждого Строка Из СоответствиеВыбранныеОбъекты Цикл
			ЗаписатьПраваОбъектов(Строка.Ключ, Строка.Значение, ЗаписьXML);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаВыбранныхСтрокДерева

&НаКлиенте
Функция ВыбраныеОбъктыДереваСоответствие()
	
	СоответствиеВыбранныеОбъекты = Новый Соответствие;
	ОбойтиРекурсивноСтрокиДерева(ДеревоПодсистем.ПолучитьЭлементы(), СоответствиеВыбранныеОбъекты);
	Возврат СоответствиеВыбранныеОбъекты;
	
КонецФункции

&НаКлиенте
Процедура ОбойтиРекурсивноСтрокиДерева(Знач Строки, СоответствиеВыбранныеОбъекты)
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		ОбработатьСтрокуДерева(ТекущаяСтрока, СоответствиеВыбранныеОбъекты);
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ОбойтиРекурсивноСтрокиДерева(ПодчиненныеСтроки, СоответствиеВыбранныеОбъекты);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку в соответствие если в строке выбрано хоть одно право и строка содежит имя объекта.
&НаКлиенте
Процедура ОбработатьСтрокуДерева(Знач Строка, СоответствиеВыбранныеОбъекты)
	
	Если ПустаяСтрока(Строка.ИмяОбъекта) Или Не (Строка.Чтение Или Строка.Просмотр Или Строка.Изменение) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПрав = Новый Структура("Чтение, Просмотр, Изменение", Строка.Чтение, Строка.Просмотр, Строка.Изменение);
	
	СоответствиеВыбранныеОбъекты.Вставить(Строка.ИмяОбъекта, СтруктураПрав);
	
КонецПроцедуры

#КонецОбласти

#Область СвязанныеОбъекты

&НаКлиенте
Процедура ЗаполнитьТаблицуСвязанныеОбъекты(СоответствиеСвязанныеОбъекты)
	ЭтотОбъект.СвязанныеОбъекты.Очистить();
	Для Каждого ПараКлючЗначение Из СоответствиеСвязанныеОбъекты Цикл
		НоваяСтрока = ЭтотОбъект.СвязанныеОбъекты.Добавить();
		НоваяСтрока.Имя = ПараКлючЗначение.Ключ;
	КонецЦикла;
	ЭтотОбъект.СвязанныеОбъекты.Сортировать("Имя");
	ЭтотОбъект.КоличествоСвязанных = ЭтотОбъект.СвязанныеОбъекты.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСвязанные(СоответствиеВыбранныеОбъекты, СоответствиеСвязанныеОбъекты)
	Для Каждого Строка Из СоответствиеСвязанныеОбъекты Цикл
		Если СоответствиеВыбранныеОбъекты.Получить(Строка.Ключ) = Неопределено Тогда
			СоответствиеВыбранныеОбъекты.Вставить(Строка.Ключ + ".Связанный", Строка.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// Функция находит и возвращает связанные объекты метаданных для переданных объектов
//
// Параметры:
//  СоответствиеВыбранныеОбъекты - Соответствие - Соответствие объектов метаданных, где:
//                   * Ключ - строка, полное имя объекта метаданных (например "Справочник.Номенклатура")
//                   * Значение - структура с правами доступа (не используется в данной функции)
//
// Возвращаемое значение:
//   Соответствие - Соответствие связанных объектов метаданных, где:
//                  * Ключ - полное имя связанного объекта метаданных
//                  * Значение - структура прав доступа по умолчанию ("Чтение, Просмотр, Изменение")
//
// Описание:
//   Функция анализирует переданные объекты метаданных и находит все связанные объекты:
//   - объекты, на которые ссылаются реквизиты
//   - табличные части
//   - регистры, используемые в движениях документов
//   При этом исключает объекты, уже присутствующие в переданном соответствии
//
&НаСервере
Функция СвязанныеОбъектыСоответствие(СоответствиеВыбранныеОбъекты)
	
	СоответствиеСвязанныеОбъекты = Новый Соответствие;
	
	Для Каждого ОбъектМетаданных Из СоответствиеВыбранныеОбъекты Цикл
		ДобавитьСвязанныеОбъекты(ОбъектМетаданных.Ключ,
			СоответствиеВыбранныеОбъекты,
			СоответствиеСвязанныеОбъекты);
	КонецЦикла;
	
	Возврат СоответствиеСвязанныеОбъекты;
	
КонецФункции


// Процедура добавляет в соответствие объекты метаданных, связанные с указанным объектом
//
// Параметры:
//  ПолноеИмя                 - Строка - Полное имя объекта метаданных (например "Справочник.Номенклатура")
//  СоответствиеВыбранныеОбъекты - Соответствие - Соответствие уже выбранных объектов, где:
//                             * Ключ - полное имя объекта метаданных
//                             * Значение - структура с правами доступа ("Чтение", "Просмотр", "Изменение")
//  СоответствиеСвязанныеОбъекты - Соответствие - Результирующее соответствие для добавления найденных связанных объектов:
//                             * Ключ - полное имя связанного объекта
//                             * Значение - структура прав доступа по умолчанию (Просмотр=Истина)
//
//Описание:
//	Процедура анализирует указанный объект метаданных и добавляет в результат:
//	1. Объекты, на которые ссылаются реквизиты (если ДобавлятьСвязанные = Истина)
//	2. Объекты из табличных частей (если ДобавлятьСвязанные = Истина)
//	3. Регистры движений (если ДобавлятьСвязанные или ДобавлятьДвижения = Истина)
//	Не добавляет объекты, уже присутствующие в СоответствиеВыбранныеОбъекты
//
&НаСервере
Процедура ДобавитьСвязанныеОбъекты(Знач ПолноеИмя, СоответствиеВыбранныеОбъекты, СоответствиеСвязанныеОбъекты)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Тип = СтрРазделить(ПолноеИмя, ".")[0];
	Если Тип <> "Документ" И Тип <> "Справочник" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПрав = Новый Структура("Чтение, Просмотр, Изменение", Ложь, Истина, Ложь);
	
	Если ЭтотОбъект.ДобавлятьСвязанные Тогда
		
		ЕстьРеквизиты = ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, "Реквизиты");
		Если ЕстьРеквизиты Тогда
			Для каждого МетаданныеРеквизита Из ОбъектМетаданных.Реквизиты Цикл
				Если МетаданныеРеквизита.Тип.Типы().Количество() > 146 Тогда
					Продолжить;
				КонецЕсли;
				Для каждого ТипРеквизита Из МетаданныеРеквизита.Тип.Типы() Цикл
					ОбъектМетаданныхТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
					Если ОбъектМетаданныхТипа <> Неопределено Тогда
						ПолноеИмяОбъекта = ОбъектМетаданныхТипа.ПолноеИмя();
						Если СоответствиеВыбранныеОбъекты[ПолноеИмяОбъекта] = Неопределено Тогда
							
							// Отладка
							Если ЭтотОбъект.Отладка и СтрНайти(ПолноеИмяОбъекта, ЭтотОбъект.СтрокаОтладки) Тогда
								ТочкаОстановка = 1;
							КонецЕсли;
							// Отладка
							
							СоответствиеСвязанныеОбъекты.Вставить(ПолноеИмяОбъекта, СтруктураПрав);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ЕстьТабличныеЧасти = ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, "ТабличныеЧасти");
		Если ЕстьТабличныеЧасти Тогда
			Для каждого МетаданныеТабЧасти Из ОбъектМетаданных.ТабличныеЧасти Цикл
				Для каждого МетаданныеРеквизита Из МетаданныеТабЧасти.Реквизиты Цикл
					Если МетаданныеРеквизита.Тип.Типы().Количество() > 146 Тогда
						Продолжить;
					КонецЕсли;
					Для каждого ТипРеквизита Из МетаданныеРеквизита.Тип.Типы() Цикл
						ОбъектМетаданныхТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
						Если ОбъектМетаданныхТипа <> Неопределено Тогда
							ПолноеИмяОбъекта = ОбъектМетаданныхТипа.ПолноеИмя();
							Если СоответствиеВыбранныеОбъекты[ПолноеИмяОбъекта] = Неопределено Тогда
								
								//Отладка
								Если ЭтотОбъект.Отладка И СтрНайти(ПолноеИмяОбъекта, ЭтотОбъект.СтрокаОтладки) Тогда
									ТочкаОстановка = 1;
								КонецЕсли;
								//Оталдка
								
								СоответствиеСвязанныеОбъекты.Вставить(ОбъектМетаданныхТипа.ПолноеИмя(), СтруктураПрав);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.ДобавлятьДвижения Или ЭтотОбъект.ДобавлятьСвязанные Тогда
	ЕстьДвижения = ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, "Движения");
		Если ЕстьДвижения Тогда
			Для каждого МетаданныеРегистра Из ОбъектМетаданных.Движения Цикл
				ПолноеИмяОбъекта = МетаданныеРегистра.ПолноеИмя();
				Если СоответствиеВыбранныеОбъекты[ПолноеИмяОбъекта] = Неопределено Тогда
					
					//Отладка
					Если ЭтотОбъект.Отладка И СтрНайти(ПолноеИмяОбъекта, ЭтотОбъект.СтрокаОтладки) Тогда
						ТочкаОстановка = 1;
					КонецЕсли;
					//Отладка
					
					СоответствиеСвязанныеОбъекты.Вставить(ПолноеИмяОбъекта, СтруктураПрав);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//Если есть БСП можно использовать ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта
&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизитИлиСвойствоОбъекта(Знач Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьПраваОбъектов(Знач ТипОбъектИмяОбъекта, Знач СтруктураПрав, Знач ЗаписьXML)
	
	ТипОбъектИмяОбъекта = СтрРазделить(ТипОбъектИмяОбъекта, ".");
	ТипОбъекта = ТипОбъектИмяОбъекта[0];
	ИмяОбъекта = ТипОбъектИмяОбъекта[1];
	
	СопоставлениеОбработчиков = Новый Соответствие;
	СопоставлениеОбработчиков.Вставить("Константа", "КонстантаПрава");
	СопоставлениеОбработчиков.Вставить("Справочник", "СправочникПрава");
	СопоставлениеОбработчиков.Вставить("Документ", "ДокументПрава");
	СопоставлениеОбработчиков.Вставить("ЖурналДокументов", "ЖурналДокументовПрава");
	СопоставлениеОбработчиков.Вставить("Отчет", "ОтчетПрава");
	СопоставлениеОбработчиков.Вставить("Обработка", "ОбработкаПрава");
	СопоставлениеОбработчиков.Вставить("ПланВидовХарактеристик", "ПланВидовХарактеристикПрава");
	СопоставлениеОбработчиков.Вставить("ПланСчетов", "ПланСчетовПрава");
	СопоставлениеОбработчиков.Вставить("ПланВидовРасчета", "ПланВидовРасчетаПрава");
	СопоставлениеОбработчиков.Вставить("РегистрСведений", "РегистрСведенийПрава");
	СопоставлениеОбработчиков.Вставить("РегистрНакопления", "РегистрНакопленияПрава");
	СопоставлениеОбработчиков.Вставить("РегистрБухгалтерии", "РегистрБухгалтерииПрава");
	СопоставлениеОбработчиков.Вставить("РегистрРасчета", "РегистрРасчетаПрава");
	СопоставлениеОбработчиков.Вставить("БизнесПроцесс", "БизнесПроцессПрава");
	СопоставлениеОбработчиков.Вставить("Задача", Неопределено);
	
	ИмяОбработчика = СопоставлениеОбработчиков[ТипОбъекта];
	Если ИмяОбработчика <> Неопределено Тогда
		Выполнить(ИмяОбработчика + "(ЗаписьXML, ИмяОбъекта, СтруктураПрав)");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

# Область ОписаниеПравДляОбъектов

// Константы
#Область Constant_Константа

#Область СписокПрав
//Read - Чтение
//Update - Изменение
//View - Просмотр
//Edit - Редактирование
//ReadDataHistory - Чтение истории данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура КонстантаПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("Constant." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Справочники
# Область Catalog_Справочник

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//View - Просмотр
//InteractiveInsert - Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InputByString - Ввод по строке
//InteractiveDeletePredefinedData - Интерактивное удаление предопределенных данных
//InteractiveSetDeletionMarkPredefinedData - Интерактивная пометка на удаление предопределенных данных
//InteractiveClearDeletionMarkPredefinedData - Интерактивное снятие пометки удаления предопределенных данных
//InteractiveDeleteMarkedPredefinedData - Интерактивное удаление помеченных предопределенных данных
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переключение на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура СправочникПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // "Добавление"
		ПраваДоступа.Вставить("Update", Истина); // "Изменение"
		//ПраваДоступа.Вставить("Delete", Ложь); // "Удаление"
		ПраваДоступа.Вставить("View", Истина);// "Просмотр"
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // "Интерактивное добавление"
		ПраваДоступа.Вставить("Edit", Истина); // "Редактирование"
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // "Интерактивное удаление"
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // "Интерактивная пометка на удаление"
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // "Интерактивное снятие пометки удаления"
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // "Интерактивное удаление помеченных"
		ПраваДоступа.Вставить("InputByString", Истина); // "Ввод по строке"
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("Catalog." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

# КонецОбласти

// Документы
# Область Document_Документ

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//Posting - Проведение
//UndoPosting - Отмена проведения
//View - Просмотр
//InteractiveInsert - Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InteractivePosting - Интерактивное проведение
//InteractivePostingRegular - Интерактивное проведение неоперативное
//InteractiveUndoPosting - Интерактивная отмена проведения
//InteractiveChangeOfPosted - Интерактивное изменение проведенных
//InputByString - Ввод по строке
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
//ПраваДоступа = Новый Структура;
//ПраваДоступа.Вставить("Read", Истина); // Чтение
//ПраваДоступа.Вставить("Insert", Истина); // "Добавление"
//ПраваДоступа.Вставить("Update", Истина); // "Изменение"
//ПраваДоступа.Вставить("Delete", Ложь); // "Удаление"
//ПраваДоступа.Вставить("Posting", Истина); // "Проведение"
//ПраваДоступа.Вставить("UndoPosting", Истина); // "Отмена проведения"
//ПраваДоступа.Вставить("View", Истина);// "Просмотр"
//ПраваДоступа.Вставить("InteractiveInsert", Истина); // "Интерактивное добавление"
//ПраваДоступа.Вставить("Edit", Истина); // "Редактирование"
//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // "Интерактивное удаление"
//ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // "Интерактивная пометка на удаление"
//ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // "Интерактивное снятие пометки удаления"
//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // "Интерактивное удаление помеченных"
//ПраваДоступа.Вставить("InteractivePosting", Истина); // "Интерактивное проведение"
//ПраваДоступа.Вставить("InteractivePostingRegular", Истина); // "Интерактивное проведение неоперативное"
//ПраваДоступа.Вставить("InteractiveUndoPosting", Истина); // "Интерактивная отмена проведения"
//ПраваДоступа.Вставить("InteractiveChangeOfPosted", Истина); // "Интерактивное изменение проведенных"
//ПраваДоступа.Вставить("InputByString", Истина); // "Ввод по строке"
//ПраваДоступа.Вставить("ReadDataHistory", Ложь); // "Чтение истории данных"
//ПраваДоступа.Вставить("ReadDataHistoryOfMissingData", Ложь); // "Чтение истории данных отсутствующих данных"
//ПраваДоступа.Вставить("UpdateDataHistory", Ложь); // "Изменение истории данных"
//ПраваДоступа.Вставить("UpdateDataHistoryOfMissingData", Ложь); // "Изменение истории данных отсутствующих данных"
//ПраваДоступа.Вставить("UpdateDataHistorySettings", Ложь); // "Изменение настроек истории данных"
//ПраваДоступа.Вставить("UpdateDataHistoryVersionComment", Ложь); // "Изменение комментария версии истории данных"
//ПраваДоступа.Вставить("ViewDataHistory", Ложь); // "Просмотр истории данных"
//ПраваДоступа.Вставить("EditDataHistoryVersionComment", Ложь); // "Редактирование комментария версии истории данных"
//ПраваДоступа.Вставить("SwitchToDataHistoryVersion", Ложь); // "Переход на версию истории данных"
#КонецОбласти

&НаКлиенте
Процедура ДокументПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // "Добавление"
		ПраваДоступа.Вставить("Update", Истина); // "Изменение"
		//ПраваДоступа.Вставить("Delete", Ложь); // "Удаление"
		ПраваДоступа.Вставить("Posting", Истина); // "Проведение"
		ПраваДоступа.Вставить("UndoPosting", Истина); // "Отмена проведения"
		ПраваДоступа.Вставить("View", Истина);// "Просмотр"
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // "Интерактивное добавление"
		ПраваДоступа.Вставить("Edit", Истина); // "Редактирование"
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // "Интерактивное удаление"
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // "Интерактивная пометка на удаление"
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // "Интерактивное снятие пометки удаления"
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // "Интерактивное удаление помеченных"
		ПраваДоступа.Вставить("InteractivePosting", Истина); // "Интерактивное проведение"
		ПраваДоступа.Вставить("InteractivePostingRegular", Истина); // "Интерактивное проведение неоперативное"
		ПраваДоступа.Вставить("InteractiveUndoPosting", Истина); // "Интерактивная отмена проведения"
		ПраваДоступа.Вставить("InteractiveChangeOfPosted", Истина); // "Интерактивное изменение проведенных"
		ПраваДоступа.Вставить("InputByString", Истина); // "Ввод по строке"
		//ПраваДоступа.Вставить("ReadDataHistory", Ложь); // "Чтение истории данных"
		//ПраваДоступа.Вставить("ReadDataHistoryOfMissingData", Ложь); // "Чтение истории данных отсутствующих данных"
		//ПраваДоступа.Вставить("UpdateDataHistory", Ложь); // "Изменение истории данных"
		//ПраваДоступа.Вставить("UpdateDataHistoryOfMissingData", Ложь); // "Изменение истории данных отсутствующих данных"
		//ПраваДоступа.Вставить("UpdateDataHistorySettings", Ложь); // "Изменение настроек истории данных"
		//ПраваДоступа.Вставить("UpdateDataHistoryVersionComment", Ложь); // "Изменение комментария версии истории данных"
		//ПраваДоступа.Вставить("ViewDataHistory", Ложь); // "Просмотр истории данных"
		//ПраваДоступа.Вставить("EditDataHistoryVersionComment", Ложь); // "Редактирование комментария версии истории данных"
		//ПраваДоступа.Вставить("SwitchToDataHistoryVersion", Ложь); // "Переход на версию истории данных"
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("Document." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

# КонецОбласти

// Журналы документов
#Область DocumentJournal_ЖурналДокументов

#Область СписокПрав
//Read
//View
#КонецОбласти

&НаКлиенте
Процедура ЖурналДокументовПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("DocumentJournal." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Отчеты
#Область Report_Отчет

#Область СписокПрав
//Read
//View
#КонецОбласти

&НаКлиенте
Процедура ОтчетПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("Report." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Обработки
#Область DataProcessor_Обработка

#Область СписокПрав
//Read
//View
#КонецОбласти

&НаКлиенте
Процедура ОбработкаПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("DataProcessor." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Планы видов характеристик
#Область ChartOfCharacteristicTypes_ПланВидовХарактеристик

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//View - Просмотр
//InteractiveInsert Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InputByString - Ввод по строке
//InteractiveDeletePredefinedData - Интерактивное удаление предопределенных
//InteractiveSetDeletionMarkPredefinedData - Интерактивная пометка на удаление предопределенных
//InteractiveClearDeletionMarkPredefinedData - Интерактивное снятие пометки удаления предопределенных
//InteractiveDeleteMarkedPredefinedData - Интерактивное удаление помеченных предопределенных
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура ПланВидовХарактеристикПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // Добавление
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		//ПраваДоступа.Вставить("Delete", Ложь); // Удаление
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // Интерактивное добавление
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // Интерактивное удаление
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // Интерактивная пометка на удаление
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // Интерактивное снятие пометки удаления
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // Интерактивное удаление помеченных
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
		//ПраваДоступа.Вставить("InteractiveDeletePredefinedData", Ложь); // Интерактивное удаление предопределенных
		ПраваДоступа.Вставить("InteractiveSetDeletionMarkPredefinedData", Истина); // Интерактивная пометка на удаление предопределенных
		ПраваДоступа.Вставить("InteractiveClearDeletionMarkPredefinedData", Истина); // Интерактивное снятие пометки удаления предопределенных
		//ПраваДоступа.Вставить("InteractiveDeleteMarkedPredefinedData", Ложь); // Интерактивное удаление помеченных предопределенных
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("ChartOfCharacteristicTypes." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры


#КонецОбласти

// Планы счетов
#Область ChartOfAccounts_ПланСчетов

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//View - Просмотр
//InteractiveInsert Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InputByString - Ввод по строке
//InteractiveDeletePredefinedData - Интерактивное удаление предопределенных
//InteractiveSetDeletionMarkPredefinedData - Интерактивная пометка на удаление предопределенных
//InteractiveClearDeletionMarkPredefinedData - Интерактивное снятие пометки удаления предопределенных
//InteractiveDeleteMarkedPredefinedData - Интерактивное удаление помеченных предопределенных
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура ПланСчетовПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // Добавление
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		//ПраваДоступа.Вставить("Delete", Ложь); // Удаление
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // Интерактивное добавление
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // Интерактивное удаление
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // Интерактивная пометка на удаление
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // Интерактивное снятие пометки удаления
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // Интерактивное удаление помеченных
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
		//ПраваДоступа.Вставить("InteractiveDeletePredefinedData", Ложь); // Интерактивное удаление предопределенных
		ПраваДоступа.Вставить("InteractiveSetDeletionMarkPredefinedData", Истина); // Интерактивная пометка на удаление предопределенных
		ПраваДоступа.Вставить("InteractiveClearDeletionMarkPredefinedData", Истина); // Интерактивное снятие пометки удаления предопределенных
		//ПраваДоступа.Вставить("InteractiveDeleteMarkedPredefinedData", Ложь); // Интерактивное удаление помеченных предопределенных
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("ChartOfAccounts." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Планы видов расчета
#Область ChartOfCalculationTypes_ПланВидовРасчета

#Область СписокПрав
//Read
//Insert
//Update
//Delete
//View
//InteractiveInsert
//Edit
//InteractiveDelete
//InteractiveSetDeletionMark
//InteractiveClearDeletionMark
//InteractiveDeleteMarked
//InputByString
//InteractiveDeletePredefinedData
//InteractiveSetDeletionMarkPredefinedData
//InteractiveClearDeletionMarkPredefinedData
//InteractiveDeleteMarkedPredefinedData
//ReadDataHistory
//ReadDataHistoryOfMissingData
//UpdateDataHistory
//UpdateDataHistoryOfMissingData
//UpdateDataHistorySettings
//UpdateDataHistoryVersionComment
//ViewDataHistory
//EditDataHistoryVersionComment
//SwitchToDataHistoryVersion
#КонецОбласти

&НаКлиенте
Процедура ПланВидовРасчетаПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // Добавление
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		//ПраваДоступа.Вставить("Delete", Ложь); // Удаление
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // Интерактивное добавление
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // Интерактивное удаление
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // Интерактивная пометка на удаление
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // Интерактивное снятие пометки удаления
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // Интерактивное удаление помеченных
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
		//ПраваДоступа.Вставить("InteractiveDeletePredefinedData", Ложь); // Интерактивное удаление предопределенных
		ПраваДоступа.Вставить("InteractiveSetDeletionMarkPredefinedData", Истина); // Интерактивная пометка на удаление предопределенных
		ПраваДоступа.Вставить("InteractiveClearDeletionMarkPredefinedData", Истина); // Интерактивное снятие пометки удаления предопределенных
		//ПраваДоступа.Вставить("InteractiveDeleteMarkedPredefinedData", Ложь); // Интерактивное удаление помеченных предопределенных
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("ChartOfCalculationTypes." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Регистры сведений
#Область InformationRegister_РегистрСведений

#Область СписокПрав
//Read - Чтение
//Update - Изменение
//View - Просмотр
//Edit - Редактирование
//TotalsControl - Управление итогами
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion- Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура РегистрСведенийПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		ПраваДоступа.Вставить("TotalsControl", Истина); // Управление итогами
		//ПраваДоступа.Вставить("ReadDataHistory", Истина); // Чтение истории данных
		//ПраваДоступа.Вставить("ReadDataHistoryOfMissingData", Истина); // Чтение истории отсутствующих данных
		//ПраваДоступа.Вставить("UpdateDataHistory", Истина); // Изменение истории данных
		//ПраваДоступа.Вставить("UpdateDataHistoryOfMissingData", Истина); // Изменение истории отсутствующих данных
		//ПраваДоступа.Вставить("UpdateDataHistorySettings", Истина); // Изменение настроек истории данных
		//ПраваДоступа.Вставить("UpdateDataHistoryVersionComment", Истина); // Изменение комментария версии истории данных	
		//ПраваДоступа.Вставить("ViewDataHistory", Истина); // Просмотр истории данных
		//ПраваДоступа.Вставить("EditDataHistoryVersionComment", Истина); // Редактирование комментария версии истории
		//ПраваДоступа.Вставить("SwitchToDataHistoryVersion", Истина); // Переключение на версию истории данных
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("InformationRegister." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Регистры накопления
#Область AccumulationRegister_РегистрНакопления

#Область СписокПра
//Read - Чтение
//Update - Изменение
//View - Просмотр
//Edit - Редактирование
//TotalsControl - Управление итогами
#КонецОбласти

&НаКлиенте
Процедура РегистрНакопленияПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		ПраваДоступа.Вставить("TotalsControl", Истина); // Управление итогами
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("AccumulationRegister." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("right");
			ЗаписьXML.ЗаписатьНачалоЭлемента("name");
			ЗаписьXML.ЗаписатьТекст(Право.Ключ);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("value");
			ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

// Регистры бухгалтерии
#Область AccountingRegister_РегистрБухгалтерии

#Область СписокПрав
//Read - Чтение
//Update - Изменение
//View - Просмотр
//Edit - Редактирование
//TotalsControl - Управление итогами
#КонецОбласти

&НаКлиенте
Процедура РегистрБухгалтерииПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		ПраваДоступа.Вставить("TotalsControl", Истина); // Управление итогами
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("AccountingRegister." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти 

// Регистры расчета
#Область CalculationRegister_РегистрРасчета

#Область СписокПрав
//Read - Чтение
//Update - Изменение
//View - Просмотр
//Edit - Редактирование
#КонецОбласти

&НаКлиенте
Процедура РегистрРасчетаПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("CalculationRegister." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

//Бизнес-процессы
#Область BusinessProcess_БизнесПроцесс

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//View - Просмотр
//InteractiveInsert Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InputByString - Ввод по строке
//InteractiveActivate - Интерактивная активация
//Start Старт
//InteractiveStart - Интерактивный старт
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура БизнесПроцессПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // Добавление
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		//ПраваДоступа.Вставить("Delete", Ложь); // Удаление
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // Интерактивное добавление
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // Интерактивное удаление
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // Интерактивная пометка на удаление
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // Интерактивное снятие пометки удаления
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // Интерактивное удаление помеченных
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("BusinessProcess." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

//Задачи
#Область Task_Задача

#Область СписокПрав
//Read - Чтение
//Insert - Добавление
//Update - Изменение
//Delete - Удаление
//View - Просмотр
//InteractiveInsert Интерактивное добавление
//Edit - Редактирование
//InteractiveDelete - Интерактивное удаление
//InteractiveSetDeletionMark - Интерактивная пометка на удаление
//InteractiveClearDeletionMark - Интерактивное снятие пометки удаления
//InteractiveDeleteMarked - Интерактивное удаление помеченных
//InputByString - Ввод по строке
//InteractiveActivate - Интерактивная активация
//Execute - Выполнение
//InteractiveExecute - Интерактивное выполнение
//ReadDataHistory - Чтение истории данных
//ReadDataHistoryOfMissingData - Чтение истории данных отсутствующих данных
//UpdateDataHistory - Изменение истории данных
//UpdateDataHistoryOfMissingData - Изменение истории данных отсутствующих данных
//UpdateDataHistorySettings - Изменение настроек истории данных
//UpdateDataHistoryVersionComment - Изменение комментария версии истории данных
//ViewDataHistory - Просмотр истории данных
//EditDataHistoryVersionComment - Редактирование комментария версии истории данных
//SwitchToDataHistoryVersion - Переход на версию истории данных
#КонецОбласти

&НаКлиенте
Процедура ЗадачаПрава(ЗаписьXML, ИмяОбъекта, ВыбранноеПраво)
	ПраваДоступа = Новый Структура;
	Если ВыбранноеПраво.Чтение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
	ИначеЕсли ВыбранноеПраво.Просмотр Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("View", Истина); // Просмотр
	ИначеЕсли ВыбранноеПраво.Изменение Тогда
		ПраваДоступа.Вставить("Read", Истина); // Чтение
		ПраваДоступа.Вставить("Insert", Истина); // Добавление
		ПраваДоступа.Вставить("Update", Истина); // Изменение
		//ПраваДоступа.Вставить("Delete", Ложь); // Удаление
		ПраваДоступа.Вставить("View", Истина); // Просмотр
		ПраваДоступа.Вставить("InteractiveInsert", Истина); // Интерактивное добавление
		ПраваДоступа.Вставить("Edit", Истина); // Редактирование
		//ПраваДоступа.Вставить("InteractiveDelete", Ложь); // Интерактивное удаление
		ПраваДоступа.Вставить("InteractiveSetDeletionMark", Истина); // Интерактивная пометка на удаление
		ПраваДоступа.Вставить("InteractiveClearDeletionMark", Истина); // Интерактивное снятие пометки удаления
		//ПраваДоступа.Вставить("InteractiveDeleteMarked", Ложь); // Интерактивное удаление помеченных
		ПраваДоступа.Вставить("InputByString", Истина); // Ввод по строке
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("object");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст("Task." + ИмяОбъекта);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Для каждого Право Из ПраваДоступа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("right");
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(Право.Ключ);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(?(Право.Значение, "true", "false"));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

#КонецОбласти

//Внешние источники данных
#Область ExternalDataSource_ВнешнийИсточникДанных 
//Use
//Administration
//StandardAuthenticationChange
//SessionStandardAuthenticationChange
//SessionOSAuthenticationChange
#КонецОбласти

#КонецОбласти
